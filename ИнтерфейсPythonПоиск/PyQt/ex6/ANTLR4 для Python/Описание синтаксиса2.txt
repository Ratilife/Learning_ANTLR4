grammar STFile;

BOM: '\uFEFF' -> skip;

fileStructure: LBRACE INT ',' entries RBRACE;

entries: entry (',' entry)*;

entry:
    // Папка: {кол-во_вложений, {"Название", 1, ...}, вложенные_элементы}
    LBRACE count=INT ',' folderHeader ',' nested_entries RBRACE
    |
    // Шаблон: {0, {"Название", 0, ...}}
    LBRACE '0' ',' templateHeader RBRACE
;

nested_entries: entry (',' entry)*;

folderHeader:
    LBRACE
    name=STRING ',' 
    '1' ','  // Тип "Папка" (второй параметр = 1)
    flags=INT ',' 
    param1=STRING ',' 
    param2=STRING
    RBRACE
;

templateHeader:
    LBRACE
    name=STRING ',' 
    '0' ','  // Тип "Шаблон" (второй параметр = 0)
    flags=INT ',' 
    param1=STRING ',' 
    codeBlock=STRING
    RBRACE
;

// Лексемы
INT: [0-9]+;
STRING: '"' ( '\\' [\\"] | ~["\\\r\n] )* '"'; // Разрешены экранированные кавычки и обратные слэши
LBRACE: '{';
RBRACE: '}';
WS: [ \t\r\n]+ -> skip;

Конечно, давайте подробно разберём этот обновлённый синтаксис ANTLR. Он описывает структуру файла, предназначенного для хранения иерархических данных, с папками и шаблонами.

**Основные изменения:**

* `fileStructure: LBRACE INT ',' entries RBRACE;` - теперь в начале файла сразу указывается число, вместо `'1'`.
* `STRING: '"' ( '\\' [\\"] | ~["\\\r\n] )* '"';` - теперь разрешены экранированные кавычки и обратные слеши внутри строк.

**Построчное описание:**

1.  `grammar STFile;`
    * Объявление грамматики с именем `STFile`.
2.  `BOM: '\uFEFF' -> skip;`
    * Определение лексемы `BOM` и её игнорирование.
3.  `fileStructure: LBRACE INT ',' entries RBRACE;`
    * Определение структуры файла.
    * `LBRACE` - открывающая фигурная скобка.
    * `INT` - целое число, которое теперь идет сразу после открытия фигурной скобки.
    * `entries` - список записей (папок или шаблонов).
    * `RBRACE` - закрывающая фигурная скобка.
4.  `entries: entry (',' entry)*;`
    * Определение списка записей, разделённых запятыми.
5.  `entry:`
    * Определение отдельной записи (папка или шаблон).
    * `LBRACE count=INT ',' folderHeader ',' nested_entries RBRACE` - структура папки.
        * `count=INT` - количество вложенных элементов.
        * `folderHeader` - заголовок папки.
        * `nested_entries` - вложенные элементы.
    * `LBRACE '0' ',' templateHeader RBRACE` - структура шаблона.
        * `'0'` - указывает, что это шаблон.
        * `templateHeader` - заголовок шаблона.
6.  `nested_entries: entry (',' entry)*;`
    * Список вложенных записей в папке.
7.  `folderHeader:`
    * Структура заголовка папки.
    * `name=STRING` - имя папки.
    * `'1'` - тип "Папка".
    * `flags=INT` - флаги папки.
    * `param1=STRING` и `param2=STRING` - параметры папки.
8.  `templateHeader:`
    * Структура заголовка шаблона.
    * `name=STRING` - имя шаблона.
    * `'0'` - тип "Шаблон".
    * `flags=INT` - флаги шаблона.
    * `param1=STRING` и `codeBlock=STRING` - параметры шаблона, включая код.
9.  `INT: [0-9]+;`
    * Определение лексемы `INT` (целое число).
10. `STRING: '"' ( '\\' [\\"] | ~["\\\r\n] )* '"';`
    * Определение лексемы `STRING` (строка) с возможностью экранирования кавычек и обратных слешей.
11. `LBRACE: '{';`
    * Определение лексемы `LBRACE`.
12. `RBRACE: '}';`
    * Определение лексемы `RBRACE`.
13. `WS: [ \t\r\n]+ -> skip;`
    * Определение лексемы `WS` (пробельные символы) и их игнорирование.

**Пример ввода корректных данных:**

```json
{
    2,
    {
        1,
        {
            "Моя папка",
            1,
            0,
            "param1",
            "param2"
        },
        {
            0,
            {
                "Мой шаблон",
                0,
                1,
                "param1",
                "код шаблона"
            }
        }
    },
    {
        0,
        {
            "Еще шаблон",
            0,
            2,
            "paramA",
            "другой код"
        }
    }
}
```

**Разъяснения примера:**

* `{2, ...}`: Файл содержит 2 элемента верхнего уровня.
* `{1, {"Моя папка", 1, 0, "param1", "param2"}, {0, {"Мой шаблон", 0, 1, "param1", "код шаблона"}}}` : первая папка, содержащая один шаблон.
* `{0, {"Еще шаблон", 0, 2, "paramA", "другой код"}}`: второй элемент верхнего уровня, шаблон.

Этот синтаксис позволяет описывать иерархические структуры, где папки могут содержать другие папки или шаблоны, а шаблоны содержат код и параметры.
