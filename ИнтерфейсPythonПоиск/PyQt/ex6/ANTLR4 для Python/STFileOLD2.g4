grammar STFile;

BOM: '\uFEFF' -> skip;

//Это правило описывает общую структуру всего файла. 
//Оно определяет, как файл должен начинаться и заканчиваться, а также какие элементы должны содержаться внутри.
//Пример: {2, ...записи...}
fileStructure: LBRACE INT ',' entries RBRACE;

//Это правило описывает список записей, которые могут содержаться в файле или внутри папки.
//позволяет обрабатывать последовательность записей, разделённых запятыми. Каждая запись может быть либо папкой, либо шаблоном.
// Пример: {...}, {...}, {...}
entries: entry (',' entry)*;

//Это правило описывает одну запись, которая может быть либо папкой, либо шаблоном.
//определяет, какие типы элементов могут содержаться в списке записей.
//Пример: {1, ...} (папка) или {0, ...} (шаблон) 
// НЕПРАВЕЛЬНО
entry:
    // Папка: {кол-во_вложений, {"Название", 1, ...}, вложенные_элементы}
    LBRACE count=INT ',' folderHeader ',' nested_entries RBRACE
    |
    // Шаблон: {0, {"Название", 0, ...}}
    LBRACE '0' ',' templateHeader RBRACE
;

nested_entries: entry (',' entry)*;

folderHeader:
    LBRACE
    name=STRING ',' 
    '1' ','  // Тип "Папка" (второй параметр = 1)
    flags=INT ',' 
    param1=STRING ',' 
    param2=STRING
    RBRACE
;

templateHeader:
    LBRACE
    name=STRING ',' 
    '0' ','  // Тип "Шаблон" (второй параметр = 0)
    flags=INT ',' 
    param1=STRING ',' 
    codeBlock=STRING
    RBRACE
;

// Лексемы
INT: [0-9]+;
STRING: '"' ( '\\' [\\"] | ~["\\\r\n] )* '"'; // Разрешены экранированные кавычки и обратные слэши
LBRACE: '{';
RBRACE: '}';
WS: [ \t\r\n]+ -> skip;